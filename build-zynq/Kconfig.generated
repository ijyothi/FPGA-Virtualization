# vi:set ft=kconfig:
# This Kconfig is auto-generated.
mainmenu "L4Re Configuration"

source "Kconfig.generated.defines"

config ARCH_ENABLE_STACK_PROTECTOR
	bool

config ARCH_NO_MMU
	bool

choice
	prompt "Target Architecture"
#  ARCH_CHOICE_DEFAULT
	default BUILD_ARCH_x86
	help
	  Specify for which processor architecture you want to build.

#  ARCH_CHOICE
config BUILD_ARCH_amd64
	bool "AMD64 architecture"
	select ARCH_ENABLE_STACK_PROTECTOR

config BUILD_ARCH_arm
	bool "ARM architecture"
	select ARCH_ENABLE_STACK_PROTECTOR

config BUILD_ARCH_arm64
	bool "ARM64 architecture (AArch64)"
	select ARCH_ENABLE_STACK_PROTECTOR

config BUILD_ARCH_mips
	bool "MIPS architecture"
	select ARCH_ENABLE_STACK_PROTECTOR

config BUILD_ARCH_ppc32
	bool "PowerPC 32 architecture (EXPERIMENTAL!)"

config BUILD_ARCH_sparc
	bool "Sparc architecture (EXPERIMENTAL)"

config BUILD_ARCH_x86
	bool "X86-32 architecture"
	select ARCH_ENABLE_STACK_PROTECTOR


endchoice

config BUILD_ARCH
	string
# ARCH_NAME
	default "amd64"  if BUILD_ARCH_amd64
	default "arm"  if BUILD_ARCH_arm
	default "arm64"  if BUILD_ARCH_arm64
	default "mips"  if BUILD_ARCH_mips
	default "ppc32"  if BUILD_ARCH_ppc32
	default "sparc"  if BUILD_ARCH_sparc
	default "x86"  if BUILD_ARCH_x86

# currently we have nothing for abi linux, so just do not offer this option
#choice
#	prompt "ABI"
#	default BUILD_ABI_l4f
#
#config BUILD_ABI_l4f
#	bool "L4/Fiasco"
#
#config BUILD_ABI_linux
#	bool "Linux"
#
#endchoice
config BUILD_ABI_l4f
	def_bool y


config BUILD_ABI
	string
	default "l4f"   if BUILD_ABI_l4f
	default "linux" if BUILD_ABI_linux

# PF_INCLUDE
if BUILD_ARCH_arm
	source "./mk/arch/Kconfig.arm.inc"
endif
if BUILD_ARCH_arm64
	source "./mk/arch/Kconfig.arm64.inc"
endif
if BUILD_ARCH_x86 || BUILD_ARCH_amd64
	source "./mk/arch/Kconfig.ia32.inc"
endif
if BUILD_ARCH_mips
	source "./mk/arch/Kconfig.mips.inc"
endif
if BUILD_ARCH_ppc32
	source "./mk/arch/Kconfig.ppc32.inc"
endif
if BUILD_ARCH_sparc
	source "./mk/arch/Kconfig.sparc.inc"
endif
config BSP_NAME
	string

choice
	prompt "Platform Selection"
# ARCH_DEFAULT_PF
	default PLATFORM_TYPE_arm_virt  if BUILD_ARCH_arm
	default PLATFORM_TYPE_arm_virt  if BUILD_ARCH_arm64

# ARCH_PLATFORMS
# vi:set ft=kconfig:
# This file is auto-generated.
config PLATFORM_TYPE_armada37xx
	bool "Marvell Armada 37xx"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_armada38x
	bool "Marvell Armada 38x"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_arm_fvp_base
	bool "ARM AEM FVP Base"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_arm_sbsa
	bool "ARM SBSA compliant platform"
	depends on BUILD_ARCH_arm64

config PLATFORM_TYPE_arm_virt
	bool "QEMU ARM Virtual Platform"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_baikal_t
	bool "Baikal-T"
	depends on BUILD_ARCH_mips

config PLATFORM_TYPE_beagleboard
	bool "Beagleboard"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_boston
	bool "Boston"
	depends on BUILD_ARCH_mips

config PLATFORM_TYPE_ci20
	bool "Creator Ci20"
	depends on BUILD_ARCH_mips

config PLATFORM_TYPE_ci40
	bool "Creator Ci40"
	depends on BUILD_ARCH_mips

config PLATFORM_TYPE_cubieboard2
	bool "CubieBoard 2"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_exynos4
	bool "Samsung Exynos4"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_exynos5
	bool "Samsung Exynos5"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_imx21
	bool "Freescale i.MX21"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_imx28
	bool "Freescale i.MX28"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_imx35
	bool "Freescale i.MX35"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_imx51
	bool "Freescale i.MX51"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_imx6
	bool "Freescale i.MX6"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_imx6ul
	bool "NXP i.MX6UL"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_imx7
	bool "NXP i.MX7"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_imx8m
	bool "NXP i.MX8M"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_imx8mp
	bool "NXP i.MX8MP"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_imx8q
	bool "NXP i.MX8Q"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_imx8x
	bool "NXP i.MX8X"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_integrator
	bool "ARM Integrator"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_kirkwood
	bool "Marvell Kirkwood"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_leon3
	bool "Sparc Leon3"
	depends on BUILD_ARCH_sparc

config PLATFORM_TYPE_ls1012afrdm
	bool "NXP LS1012A-FRDM"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_ls1021atwr
	bool "NXP TWR-LS1021A"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_ls1046
	bool "NXP LS1046"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_lx2160
	bool "NXP LX2160"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_malta
	bool "Malta"
	depends on BUILD_ARCH_mips

config PLATFORM_TYPE_mpc5200
	bool "MPC5200"
	depends on BUILD_ARCH_ppc32

config PLATFORM_TYPE_msm8226
	bool "Qualcomm MSM8226"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_msm8909
	bool "Qualcomm MSM8909"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_msm8916
	bool "Qualcomm MSM8916"
	depends on BUILD_ARCH_arm64 || BUILD_ARCH_arm

config PLATFORM_TYPE_msm8939
	bool "Qualcomm MSM8939"
	depends on BUILD_ARCH_arm64 || BUILD_ARCH_arm

config PLATFORM_TYPE_msm8974
	bool "Qualcomm MSM8974"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_omap3_am33xx
	bool "TI OMAP AM33xx"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_omap3evm
	bool "TI OMAP3EVM"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_omap5
	bool "OMAP5 EVM"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_pandaboard
	bool "Pandaboard"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_parallella
	bool "Parallella Board"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_pc
	bool "PC"
	depends on BUILD_ARCH_x86 || BUILD_ARCH_amd64

config PLATFORM_TYPE_rcar3
	bool "Renesas R-Car Gen3"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_rcar4
	bool "Renesas R-Car Gen4"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_rpi
	bool "Raspberry Pi"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_rv
	bool "ARM Realview (Generic)"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_rv_pbx
	bool "ARM Realview PBX"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_rv_vexpress_a15
	bool "ARM Versatile Express A15"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_rv_vexpress
	bool "ARM Versatile Express"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_s32g
	bool "NXP S32G"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_sead3
	bool "Sead3"
	depends on BUILD_ARCH_mips

config PLATFORM_TYPE_sm8150
	bool "Qualcomm SM8150"
	depends on BUILD_ARCH_arm64

config PLATFORM_TYPE_tegra2
	bool "Nvidia Tegra 2"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_tegra3
	bool "Nvidia Tegra 3"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_ti_am
	bool "TI-AM6xx"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64

config PLATFORM_TYPE_zedboard
	bool "Xilinx Zynq Zedboard"
	depends on BUILD_ARCH_arm

config PLATFORM_TYPE_zynqmp
	bool "Xilinx Zynq UltraSCALE+ MPSoC"
	depends on BUILD_ARCH_arm || BUILD_ARCH_arm64


config PLATFORM_TYPE_custom
	bool "Custom platform"
	help
	  Define your own platform, alternatively define the following
	  in conf/platforms/yourname.conf:
	    PLATFORM_RAM_BASE    = 0
	    PLATFORM_RAM_SIZE_MB = 64


endchoice

if PLATFORM_TYPE_custom

menu "Custom Platform Definition"

config PLATFORM_TYPE
	string "Name of your platform"

config PLATFORM_RAM_BASE
	hex "Start of RAM"
	default 0x0
	help
	  Hexadecimal physical address where RAM memory starts on the
	  platform.

config PLATFORM_RAM_SIZE_MB
	int "RAM-Memory available on the platform in MB"
	default 128

config PLATFORM_UART_NR
	int "Select UART to use"
	default 0

endmenu # Custom platform
endif

source "Kconfig.generated.platform_types"
source "Kconfig.generated.pkgs"

config MMU
	bool
	default y
	depends on !ARCH_NO_MMU

config USE_DROPS_STDDIR
	def_bool n

config DROPS_STDDIR
	string
	default "/path/to/l4re"

config DROPS_INSTDIR
	string
	default "/path/to/l4re"

config BID_COLORED_PHASES
	bool
	default y

menu "Building"

config YACC
	string
	default "yacc"

config LEX
	string
	default "flex"

config CTAGS
	string
	default "ctags"

config ETAGS
	string
	default "etags"

config BID_OPTIMIZE_SIZE
	bool "Optimize for size (-Os)"
	help
	  Use -Os instead of -O2 to build smaller executables.

config BID_DEBUG_INFO
	bool "Generate debug information"
	default y
	help
	  Generate debug information.

	  If unsure, say 'Y'.

config BID_BUILD_TESTS
	bool "Also build tests"
	default y
	help
	  Enable to build tests.

	  If unsure, say 'N'.

config INT_CPP_NAME_SWITCH
	bool "Automatically determine internal gcc preprocessor names"
	default y

config INT_LD_NAME_SWITCH
	bool "Automatically determine internal ld names"
	default y

config INT_PP_NAME
	string "Internal name of the compiler preprocessor"
	default "cpp0"
	depends on !INT_CPP_NAME_SWITCH

config INT_LD_NAME
	string "Internal name of the compiler linker"
	default "ld"
	depends on !INT_LD_NAME_SWITCH


config BID_STRIP_BINARIES
	bool "Strip binaries on install"
	default y
	help
	  If enabled, binaries (libraries and executables) will be stripped on
	  installation into $(L4DIR)/bin or $(DROPS_STDDIR)/bin. If you want
	  to load them with all their symbols (eg to show the symbols with the
	  Fiasco kernel debugger), say 'N' here.

	  If unsure, say 'Y'.

config BID_LD_EMIT_UNWIND
	bool "GCC: Emit unwind tables"
	help
	  If enabled, gcc will be passed the '-funwind-tables' cmdline
	  option, adding unwind tables for all generated code. Binaries will
	  be larger, but without unwind tables no backtraces can be created
	  on most architectures (except on x86) and no exception handling
	  can be provided by LLVM's libunwind.

	  If unsure, say 'N'.

config BID_GCC_OMIT_FP
	bool "GCC: Omit Frame-pointers"
	default y
	help
	  If enabled, gcc will be passed the '-fomit-frame-pointer' cmdline
	  option, adding an additional register to the register set for the
	  generated code. Programs will be faster, but backtraces cannot be
	  done, seriously hindering debugging.

	  If unsure, say 'Y'.

config BID_GCC_ENABLE_STACK_PROTECTOR
    bool "GCC: enable stack protector"
    default y if ARCH_ENABLE_STACK_PROTECTOR
    help
      If enabled, support for the gcc stack protector will be enabled.
      The stack protector uses stack canaries to detect stack smashing
      attacks (see "man gcc" for details). In L4Re the stack protector is
      enabled only for packages that are linked against the full uclibc.
      Enabling this feature will add some overhead, but increase security.

      If unsure, say 'Y'.

choice
    prompt "GCC: Enable stack protector"
    depends on BID_GCC_ENABLE_STACK_PROTECTOR
    default BID_GCC_STACK_PROTECTOR

config BID_GCC_STACK_PROTECTOR_ALL
    bool "on all functions"
    help
        If enabled, '-fstack-protector-all' flag is used for gcc. This
        option adds significant overhead, as the stack canary is checked on
        every function return. See "man gcc" for details.

config BID_GCC_STACK_PROTECTOR
    bool "exclusively for functions with vulnerable objects"
    help
        If enabled, '-fstack-protector' flag is passed to gcc. If this
        flag is set, gcc will add stack canaries to vulnerable functions, such as
        functions that call "alloca", and functions with buffers larger than 8
        bytes.

endchoice

config BID_GENERATE_MAPFILE
	bool "Generate Map-files for binaries"
	help
	  Enabling this option will generate map-files together with the
	  binaries. This might be handy for debugging purposes. See ld(1)
	  for details on mapfiles.

          If unsure, say N.

config BID_BUILD_DOC
	bool "Build doc directories"
	help
	  Say Y if you also want to build the doc directories.

config RELEASE_MODE
	bool "Do a release and non-debug(able) build"
	help
	  Enable to leave out debugging and other code normally not needed.
	  Do only enable this after you have a working configuration.

	  Say N.

config MAKECONFS_ADD
	string "Additional Makeconf files"
	help
	  List of white space separated suffixes of Makeconf files
	  which will be included in every source directory as
	  Makeconf.<suffix>.

config EXPERIMENTAL
	bool "Prompt for experimental features"
	help
	  Experimental features are available when enabling this option.
	  This encompases features that are still in development and might not
	  work correctly for all packages on all architectures at all times.

	  Use with caution!

config EXPERT
	bool "Show expert options"
	help
	  Expert options are those that you should never have to change unless
	  you have a very good reason to do so. Their default values are
	  intended to be used for nearly all use-cases. So only enable this
	  option if you are certain that you need it and ensure you are aware
	  of all consequences when changing any of them.

choice
	prompt "Position independent executables"
	depends on EXPERIMENTAL
	depends on BUILD_ARCH_amd64 || BUILD_ARCH_arm || BUILD_ARCH_arm64
	default BID_PIE_NONE

config BID_PIE_NONE
	bool "no"
	help
	  Do not support position independent executables.

config BID_PIE_VOLUNTARY
	bool "selected packages"
	help
	  Build position independent executables where beneficial. All
	  libraries are built as position independent. Executables are only
	  linked position independent if the package indicated to do so.
	  Enabling this option will add some executable size and runtime
	  overhead.

config BID_PIE_ALL
	bool "everything"
	help
	  Build all executables as position independent. This is not supported
	  by all packages on all platforms and might break their build.
	  Enabling this option will add some executable size and runtime
	  overhead.

endchoice

config BID_THUMB
	bool "Build thumb code"
	depends on EXPERIMENTAL
	depends on BUILD_ARCH_arm
	help
	  Build with -mthumb by default. This will reduce the code size at the
	  slight expense of execution speed.

config BID_PIE
	bool
	default y
	depends on BID_PIE_VOLUNTARY || BID_PIE_ALL

endmenu

# PKG_KCONFIG
menu "Bootstrap"

config BOOTSTRAP_ROOTTASK_NX
	bool "Support W^X in the root task"
	help
	  Mark the text sections of the root task as non-writeable in the memory map
	  and mark the data sections as non executable.
	
	  This is useful if you want to ensure a requirement to have this property
	  enforced for the root task. However, be aware that this will only protect
	  the memory from the binary. Moe will still have large parts of the memory
	  mapped as both executable and writable due to the system design.
	
	  Also this precludes self-adaptation of Moe when compiled for the wrong
	  kernel type (virtualization enabled vs. non-virt). So only enable this when
	  you understand the features limitations and are sure that you need it.
	
	  If you enable this feature and the system fails to boot after loading
	  Sigma0, ensure the KERNEL_CPU_VIRT option is in sync with the respective
	  kernel configuration.
	
	  If in doubt, choose n.

config BOOTSTRAP_THUMB_ENTRY
	bool "Thumb mode entry point"
	depends on BUILD_ARCH_arm
	help
	  Assume that bootstrap is started in Thumb mode.

	  If in doubt, choose n.

endmenu
menu "cons console multiplexer"

config CONS_USE_ASYNC_FE
	bool "Support and use asynchronous interface"
	help
	  This enables an asynchronous interface for cons using threads.

	  Only enable this if you know what you are doing. If in doubt select N.

endmenu
menu "io platform manager"

config L4IO_ACPI
	bool "Include the ACPI subsystem" if !BUILD_ARCH_x86 && !BUILD_ARCH_amd64
	depends on BUILD_ARCH_x86 || BUILD_ARCH_amd64
	default y
	select L4IO_PCI

config L4IO_PCI
	bool "Include the PCI subsystem"
	select L4IO_SCU_IMX8QM
	default y

config L4IO_PCIID_DB
	bool "Include PCI-ID database for descriptive PCI devices"
	depends on L4IO_PCI
	default y

menu "Device drivers"

source "pkg/io/io/server/src/drivers/Kconfig.L4"
source "pkg/io/io/server/src/drivers/gpio/Kconfig.L4"
endmenu

endmenu
menu "Compiler runtime"

config COMPILER_RT_USE_LIBGCC
  bool
  # Clang is not able to compile libgcc.
  select COMPILER_RT_USE_TOOLCHAIN_LIBGCC if $(BID_COMPILER_TYPE) = "clang"
  # Sparc and PPC32 cannot be build from source.
  select COMPILER_RT_USE_TOOLCHAIN_LIBGCC if BUILD_ARCH = "sparc" || BUILD_ARCH = "ppc32"

config COMPILER_RT_USE_LIBCLANG_RT
  # libunwind requires unwind tables also for static binaries.
  select BID_LD_EMIT_UNWIND
  bool

choice
  prompt "Runtime library"
  default COMPILER_RT_CHOICE_AUTO

config COMPILER_RT_CHOICE_AUTO
  bool "Determine automatically"
  select COMPILER_RT_USE_LIBGCC if $(BID_COMPILER_TYPE) = "gcc"
  select COMPILER_RT_USE_LIBCLANG_RT if $(BID_COMPILER_TYPE) = "clang"
  help
    Use libgcc if GCC is used as the compiler and use libclang_rt if Clang is
    used as the compiler.

config COMPILER_RT_CHOICE_LIBGCC
  bool "libgcc"
  select COMPILER_RT_USE_LIBGCC

config COMPILER_RT_CHOICE_LIBCLANG_RT
  bool "libclang_rt"
  select COMPILER_RT_USE_LIBCLANG_RT
  depends on $(BID_COMPILER_TYPE) = "clang"

endchoice

config COMPILER_RT_LIBGCC_SHARED
  bool "Use shared libgcc"
  depends on COMPILER_RT_USE_LIBGCC && !COMPILER_RT_USE_TOOLCHAIN_LIBGCC
  help
    Say Y if you want to use shared libgcc (libgcc_s.so).

# force to y if compiler clang, we cannot compile libgcc with clang!
config COMPILER_RT_USE_TOOLCHAIN_LIBGCC
  bool "Use libgcc from toolchain"
  depends on COMPILER_RT_USE_LIBGCC
  default n
  help
    Say Y if you want to use the libgcc shipped with your toolchain instead of
    the one built specifically for L4Re.

endmenu
menu "Sigma0 (root pager)"
	visible if EXPERT

config SIGMA0_PRIORITY
	int "Priority"
	range 1 255
	default 255
	help
	  This sets the priority the root pager runs with. The default
	  is the highest priority and is almost always the best fit.

	  Valid values range from 1 to 255.

endmenu
menu "Virtual network switch"

config VNS_PORT_FILTER
	bool "Support port filtering"
	help
	  This enables the filter path in the virtual network switch.
	  The filter must be filled with actual filter code to do
	  something useful.

	  If unsure, select N.

endmenu
